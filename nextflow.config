process {
  executor = 'slurm'
  scratch = true
  queue = 'compute_amd'        
  cpus = 8              // default number of CPUs per job
  memory = '64 GB'          // default memory
  time = '12h'              // default runtime limit
  clusterOptions = '--account=scw1557'
}

timeline {
  enabled = true
  file = 'timeline.html'
  overwrite = true
}

trace {
  enabled = true
  file = 'trace.txt'
  overwrite = true
}

dag {
  enabled = true
  file = 'flow.dot'
  overwrite = true
}

params {


  execution {
    queue_size = 100
    threads = 1
    max_retries = 5
    error_strategy = "retry"
  }
}

profiles {
  hawk_conda {
    process.executor = 'slurm'
    workDir          = "/scratch/$USER/nxf-work"
    process.queue = 'compute_amd'
    process.stageInMode   = 'copy'
    process.stageOutMode  = 'rsync'
    process.beforeScript = 'module load apptainer'
    process.clusterOptions = '--account=scw1557'
    process.tmpDir = "/scratch/$USER/tmp"

    executor {
      pollInterval      = '10 sec'   // how often to check task status
      queueStatInterval = '1 min'
      exitReadTimeout   = '5 min'    // wait longer to read .exitcode after job ends
    }
    
    // Enable Apptainer (instead of Singularity)
    apptainer.enabled    = true
    apptainer.autoMounts = true
    apptainer.cacheDir   = "/scratch/$USER/apptainer"
    apptainer.pullTimeout = '1h'

    // Disable other runtimes
    singularity.enabled  = false
    docker.enabled       = false
    conda.enabled        = false
  }

  hpc_apptainer {

    // SLURM + work/output locations
    process.executor = 'slurm'
    workDir          = "/scratch/$USER/nxf-work"
    process.queue = 'htc'
    process.container = "/scratch/$USER/exome-container_1.1.sif"
    // ---- Pipeline params (host paths) ----
    params {
      annovar_home = "$HOME/DISSERTATION/exome-workflow-proj/annovar"      
      out_dir      = "/scratch/$USER/exome-out"
      ref_dir = "/scratch/$USER/data"
      sleepTimeStart = '0m'
      sleepTimeEnd = '0m'
      retries = '5'

      trimReadsJobLength = "2h"
      trimReadsMemory = "6.G"
      trimReadsCpus = "2"

      fastqcJobLength = "2h"
      fastqcMemory    = "4.G"
      fastqcCpus      = "2"

      mappingCpus = "4"
      mappingJobLength = "8h"
      mappingMemory = "16.G"

      makeBamJobLength = "8h"
      makeBamMemory    = "24.G"
      makeBamCpus      = "4"

      markDuplicatesJobLength = "12h"
      markDuplicatesMemory    = "40.G"   // if tight, raise to 48â€“64.G
      markDuplicatesCpus      = "4"

      bamstatsJobLength = "2h"
      bamstatsMemory    = "8.G"
      bamstatsCpus      = "2"

      indexBamJobLength = "1h"
      indexBamMemory    = "4.G"
      indexBamCpus      = "2"

      addReadgroupsJobLength = "2h"
      addReadgroupsMemory    = "12.G"
      addReadgroupsCpus      = "2"

      createRecalibrationModelJobLength = "8h"
      createRecalibrationModelMemory    = "40.G"
      createRecalibrationModelCpus      = "4"
      
      recalibrateBamJobLength = "6h"
      recalibrateBamMemory    = "40.G"
      recalibrateBamCpus      = "4"

      callVariantsJobLength = "24h"
      callVariantsMemory    = "48.G"
      callVariantsCpus      = "8"

      // GATK IndexFeatureFile (initial VCF index)
      indexVariantFile2JobLength = "1h"
      indexVariantFile2Memory    = "6.G"
      indexVariantFile2Cpus      = "2"

      // GATK SelectVariants (keep SNPs)
      removeIndelsJobLength = "2h"
      removeIndelsMemory    = "16.G"
      removeIndelsCpus      = "2"

      // GATK IndexFeatureFile (SNP VCF index)
      indexSnpVcfJobLength = "2h"
      indexSnpVcfMemory    = "8.G"
      indexSnpVcfCpus      = "2"

      // GATK VariantFiltration (hard filters)
      filterVariantsJobLength = "4h"
      filterVariantsMemory    = "16.G"
      filterVariantsCpus      = "2"

      // GATK IndexFeatureFile (filtered VCF index)
      indexVcfJobLength = "1h"
      indexVcfMemory    = "5.G"
      indexVcfCpus      = "2"

      // GATK CalculateGenotypePosteriors
      refineGenotypesJobLength = "4h"
      refineGenotypesMemory    = "4.G"
      refineGenotypesCpus      = "2"

      // ANNOVAR table_annovar.pl
      annotateVariantsJobLength = "8h"
      annotateVariantsMemory    = "32.G"
      annotateVariantsCpus      = "4"
    }

    // ---- Container runtime ----
    apptainer {
      enabled    = true
      autoMounts = true
      cacheDir   = "/scratch/$USER/apptainer"
      runOptions = "--bind ${params.annovar_home}:/opt/annovar --bind ${params.ref_dir}:/ref"
    }

    

    // ---- Environment inside the container ----
    env {
      ANNOVAR_HOME = "/opt/annovar"
      REF_DIR      = "/ref"
    }

    apptainer.runOptions = "--bind /bin/ps:/bin/ps"

    // If you only want ANNOVAR to see its env var:
    // process.withName:annotate_variants { env.ANNOVAR_HOME = "/opt/annovar" }
  }
}